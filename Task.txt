Work
Day 1 :-  (Date:- 4/29/25)
   1 -> Create the transaction and Block Classes and export at  Block.js and Transaction.js From Class Diagram (Faisal)
   2 -> Create Structure of Full Node Class  (Abdullah)
Task Completed :- 1
Task Left For Next Day : 1


Day 2:- (Date:- 4/20/25) 

   1  -> (Faisal)
     Day 1 Task 1 (Remaining from Day 1) + Create a mine function inside the block class that receives merkleRoot hash as a param,
   combine all the fields of  block class into a string (except currenthash) and then calculate the nonce for which
   the hash of the block is below a difficulty target, set that as 2n**232n, update the currenthash and return true
   from the function.

   Install Etherjs using (npm install ethers), import that and use ethers.sha()  to calculate the hash

   you can get hint from this code snippet:-

// import {ethers,toUtf8Bytes} from "ethers"
//     let Block = { 
//     nonce:0,
//     data:"This is a Test Block"
//}
// let difficultyTarget = 2n**240n;
// let hash  = ethers.sha256(toUtf8Bytes(JSON.stringify(Block)))
// while(BigInt(hash) > difficultyTarget){
//      Block.nonce++;
//      hash = ethers.sha256(toUtf8Bytes(JSON.stringify(Block)))
// }
  
    Note:- Do not push node_modules to github, use (git add file_name ) sperately for each file

   2 -> (Abdullah) 
   Create and initialize the databaseconnector, Setup TransactionsWrapper and add calculation of merkleRoot
   


  Day 3:- (1/5/2025)
  1 -> ( Faisal ) 
    getBlock(hash){}    //Query Block Data By its Hash

    getBlock(nonce){}   //Query Block Data By its Nonce

    getTransaction(hash){}   //Query Transaction by its hash

    getTransactions(blockchainAddress){}  //Query all Transactions of a user

   Use The Database Attribute to Query The data, i-e
   Database.prepare(`Select * from transaction`).all() //Return The result from the function

   Database for the Blockchain with the name of Blockchain.db has been created using this sql Query
   Create Table User (
     balance double(18,5) not null,
     blockchainAddress varchar(20) not null unique,
     nonce integer not null,
     primary key (blockchainAddress)
);

create Table Block(
        currentblockhash varchar(64) not null unique,
        previousBlockhash varchar(64) not null unique,
        nonce integer not null,
        timestamp integer not null,
        blocknumber integer not null,
        merkleroot varchar(64) not null unique,
        primary key (currentblockhash)
);

Create Table Transactions (
    blockhash varchar(64) not null,
    transactionHash varchar(64) unique not null,
    transactionNonce integer not null,
    senderBlockchainAddress varchar(20) not null,
    receiverBlockchainAddress varchar(20) not null,
    value double not null,
    gasfee double not null,
    primary key (transactionHash),
    foreign key (senderBlockchainAddress) references User(blockchainAddress),
    foreign key (receiverBlockchainAddress) references User(blockchainAddress),
    foreign key (blockhash) references Block(blockhash)
)

   2-> (Abdullah)
   Complete The Verify Transaction, Block Creation and JSONrpc Module