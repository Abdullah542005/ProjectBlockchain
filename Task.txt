Work
Day 1 :-  (Date:- 4/29/25)
   1 -> Create the transaction and Block Classes and export at  Block.js and Transaction.js From Class Diagram (Faisal)
   2 -> Create Structure of Full Node Class  (Abdullah)
Task Completed :- 2
Task Left For Next Day : 0


Day 2:- (Date:- 4/30/25) 

   1  -> (Faisal) Done
   Create a mine function inside the block class that receives merkleRoot hash as a param,
   combine all the fields of  block class into a string (except currenthash) and then calculate the nonce for which
   the hash of the block is below a difficulty target, set that as 2n**232n, update the currenthash and return true
   from the function.

   Install Etherjs using (npm install ethers), import that and use ethers.sha()  to calculate the hash

   you can get hint from this code snippet:-

// import {ethers,toUtf8Bytes} from "ethers"
//     let Block = { 
//     nonce:0,
//     data:"This is a Test Block"
//}
// let difficultyTarget = 2n**240n;
// let hash  = ethers.sha256(toUtf8Bytes(JSON.stringify(Block)))
// while(BigInt(hash) > difficultyTarget){
//      Block.nonce++;
//      hash = ethers.sha256(toUtf8Bytes(JSON.stringify(Block)))
// }
  
    Note:- Do not push node_modules to github, use (git add file_name ) sperately for each file

   2 -> (Abdullah) 
   Create and initialize the databaseconnector, Setup TransactionsWrapper and add calculation of merkleRoot
   


  Day 3:- (1/5/2025)
  1 -> ( Faisal ) 
    getBlock(hash){}    //Query Block Data By its Hash

    getBlock(nonce){}   //Query Block Data By its Nonce

    getTransaction(hash){}   //Query Transaction by its hash

    getTransactions(blockchainAddress){}  //Query all Transactions of a user

   Use The Database Attribute to Query The data, i-e
   Database.prepare(`Select * from transaction`).all() //Return The result from the function

   Database for the Blockchain with the name of Blockchain.db has been created using this sql Query
   Create Table User (
     balance double(18,5) not null,
     blockchainAddress varchar(20) not null unique,
     nonce integer not null,
     primary key (blockchainAddress)
);

create Table Block(
        currentblockhash varchar(64) not null unique,
        previousBlockhash varchar(64) not null unique,
        nonce integer not null,
        timestamp integer not null unique,
        blocknumber integer not null unique,
        merkleroot varchar(64) not null unique,
        primary key (currentblockhash)
);

Create Table Transactions (
    blockhash varchar(64) not null,
    transactionHash varchar(64) unique not null,
    transactionNonce integer not null,
    senderBlockchainAddress varchar(20) not null,
    receiverBlockchainAddress varchar(20) not null,
    value double not null,
    gasfee double not null,
    timestamp integer not null,
    primary key (transactionHash),
    foreign key (senderBlockchainAddress) references User(blockchainAddress),
    foreign key (receiverBlockchainAddress) references User(blockchainAddress),
    foreign key (blockhash) references Block(currentblockhash)
    foreign key (timestamp) references Block(timestamp)

)

   2-> (Abdullah)
   Complete The Verify Transaction, Block Creation and JSONrpc Module

Task Completed: 2


Day 4  
    1 -> (Faisal)
       Completed Previous Task, Learn how to create p2p network with libp2p library.
    2 -> (Abdullah) 
       Complete the commitBlock function  
Task Completed : 2

Day 5
   1 - > (Faisal) Test current implemented functionalities of the System, Use ThunderBolt client to send Post Request 
   To Express Server, Test For Multiple Edge Cases. Add Comments where fixes should be made.

   2 - > (Abdullah) Complete remaining possible functions of full node and create a map for p2pNode module.

Task Completed : 0;



Day 6 + 7 

1 -> (Faisal)
Complete the function named as  toJsonDB(blockNumber)  and fromJsonDB(FullNode Node,data) in the databaseConnector Js module.

The function toJsonDB(blockNumber) receives a blockNumber, fetches all the block's data and it's respective 
transactions starting from that blockNumber to the latest Block.
The return object should be like.
[
  { 
 Blockheader:{ currentHash:" ",.......} 
 Transactions:[
     {TransactionData#1},
     {TransactionData#2}...
  }, 
 { 
 Blockheader:{ currentHash:" ",.......} 
 Transactions:[
     {sender:" ",receiver:" ", ....},
     {TransactionData#2}...
  },
......... 
]
   You can use select query to fetch the blocks with its blockNumber and then it's respective currenthash to fetch all the transactions added in the block.


For the function fromJsonDB(node,data)
For each block and it's transactions in the data array, call the createBlock(block, transactions)
Function, pass in respective block and it's transactions from the data(received from toJsonDB() function).

// Remember the order of attributes in block and transaction matters should be in the order they are received by their constructor.(i-e Block class constructor)


2 - > (Abdullah) Create and finalize the mechanism for block and transactions propagation across the network.

Task Completed : 1